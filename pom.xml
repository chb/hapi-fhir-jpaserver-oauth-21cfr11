<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ca.uhn.hapi.fhir</groupId>
    <artifactId>hapi-fhir-jpaserver-oauth</artifactId>
    <version>3.8.1-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>hapi-fhir-jpaserver-oauth</name>
    <description>HAPI FHIR OAuth JPA Server</description>

    <!-- Note: HAPI projects use the "hapi-fhir" POM as their base to provide 
        easy management. You do not need to use this in your own projects, so the 
        "parent" tag and it's contents below may be removed if you are using this 
        file as a basis for your own project. -->
    <properties>
        <!-- configure timestamp in MANIFEST.MF for maven-war-provider -->
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Dependency Versions -->
        <derby_version>10.14.2.0</derby_version>
        <jaxb_api_version>2.3.1</jaxb_api_version>
        <jetty_version>9.4.27.v20200227</jetty_version>
        <phloc_schematron_version>2.7.1</phloc_schematron_version>
        <spring_version>5.1.8.RELEASE</spring_version>
        <thymeleaf-version>3.0.11.RELEASE</thymeleaf-version>
        <ebay_cors_filter_version>1.0.1</ebay_cors_filter_version>
        <commons_dbcp2>2.6.0</commons_dbcp2>
        <hapi.version>3.8.0</hapi.version>
        <mariadb.version>2.4.3</mariadb.version>
        <mysql.version>6.0.5</mysql.version>
        <postgresql.version>42.2.6</postgresql.version>

        <!-- javadoc and scm configuration for the CI -->
        <maven.javadoc.failOnError>false</maven.javadoc.failOnError>
        <sonar.scm.disabled>true</sonar.scm.disabled>
        <project.scm.id>github</project.scm.id>

        <!-- Unit and integration tests management -->
        <skip.unit.tests>false</skip.unit.tests>
        <skip.integration.tests>true</skip.integration.tests>
    </properties>

    <repositories>
        <repository>
            <id>oss-snapshots</id>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>ut</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>it</id>
            <properties>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.unit.tests>true</skip.unit.tests>
            </properties>
        </profile>
    </profiles>

    <scm>
        <url>https://github.com/AriHealth/hapi-fhir-jpaserver-oauth.git</url>
        <connection>scm:git:https://github.com/AriHealth/hapi-fhir-jpaserver-oauth.git</connection>
        <developerConnection>scm:git:https://github.com/AriHealth/hapi-fhir-jpaserver-oauth.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>nexus-releases</id>
            <url>https://nexus.atosresearch.eu/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <url>https://nexus.atosresearch.eu/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencies>

        <!-- JUnit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>

        <!-- Jetty -->
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-api</artifactId>
            <version>${jetty_version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-client</artifactId>
            <version>${jetty_version}</version>
        </dependency>

        <!-- This dependency includes the core HAPI-FHIR classes -->
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-base</artifactId>
            <version>${hapi.version}</version>
        </dependency>

        <!-- At least one "structures" JAR must also be included -->
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-structures-dstu3</artifactId>
            <version>${hapi.version}</version>
        </dependency>

        <!-- This dependency includes the JPA server itself, which is packaged 
            separately from the rest of HAPI FHIR -->
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-jpaserver-base</artifactId>
            <version>${hapi.version}</version>
        </dependency>

        <!-- This dependency is used for the "FHIR Tester" web app overlay -->
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-testpage-overlay</artifactId>
            <version>${hapi.version}</version>
            <type>war</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-testpage-overlay</artifactId>
            <version>${hapi.version}</version>
            <classifier>classes</classifier>
            <scope>provided</scope>
        </dependency>

        <!-- HAPI-FHIR uses Logback for logging support. The logback library 
            is included automatically by Maven as a part of the hapi-fhir-base dependency, 
            but you also need to include a logging library. Logback is used here, but 
            log4j would also be fine. -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>

        <!-- Needed for JEE/Servlet support -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- If you are using HAPI narrative generation, you will need to 
            include Thymeleaf as well. Otherwise the following can be omitted. -->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>${thymeleaf-version}</version>
        </dependency>

        <!-- Used for CORS support -->
        <dependency>
            <groupId>org.ebaysf.web</groupId>
            <artifactId>cors-filter</artifactId>
            <version>${ebay_cors_filter_version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>servlet-api</artifactId>
                    <groupId>javax.servlet</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Spring Web is used to deploy the server to a web container. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring_version}</version>
        </dependency>

        <!-- You may not need this if you are deploying to an application 
            server which provides database connection pools itself. -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>${commons_dbcp2}</version>
        </dependency>

        <!-- This example does not use Derby embedded database. We skip the 
            dependencies. -->
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>${derby_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbynet</artifactId>
            <version>${derby_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbyclient</artifactId>
            <version>${derby_version}</version>
        </dependency>

        <!-- The following dependencies are only needed for automated unit 
            tests, you do not neccesarily need them to run the example. -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlets</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-server</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty_version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.phloc</groupId>
            <artifactId>phloc-schematron</artifactId>
            <version>${phloc_schematron_version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>Saxon-HE</artifactId>
                    <groupId>net.sf.saxon</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- For some reason JavaDoc crashed during site generation unless 
            we have this dependency -->
        <dependency>
            <groupId>javax.interceptor</groupId>
            <artifactId>javax.interceptor-api</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <!-- MariaDB -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>${mariadb.version}</version>
        </dependency>

        <!-- PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <version>2.3.1.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.projectreactor</groupId>
            <artifactId>reactor-spring</artifactId>
            <version>1.0.1.RELEASE</version>
        </dependency>
        <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-jsr310</artifactId>
        <version>2.9.7</version>
    </dependency>

    </dependencies>


    <build>

        <!-- Tells Maven to name the generated WAR file as hapi-fhir-jpaserver-example.war -->
        <finalName>hapi-fhir-jpaserver-oauth</finalName>

        <!-- The following is not required for the application to build, 
            but allows you to test it by issuing "mvn jetty:run" from the command line. -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>9.4.27.v20200227</version>
                    <configuration>
                        <webApp>
                            <contextPath>/hapi</contextPath>
                            <allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
                        </webApp>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- Tell Maven which Java source version you want to use -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- The configuration here tells the WAR plugin to include the 
                FHIR Tester overlay. You can omit it if you are not using that feature. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Build-Time>${maven.build.timestamp}</Build-Time>
                        </manifestEntries>
                    </archive>
                    <overlays>
                        <overlay>
                            <groupId>ca.uhn.hapi.fhir</groupId>
                            <artifactId>hapi-fhir-testpage-overlay</artifactId>
                        </overlay>
                    </overlays>
                    <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                </configuration>
            </plugin>

            <!-- This plugin is just a part of the HAPI internal build process, 
                you do not need to incude it in your own projects -->
            <!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-deploy-plugin</artifactId> 
                <configuration> <skip>true</skip> </configuration> </plugin> -->

            <!-- Add integration tests -->
            <!-- Skip unit testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <groups>net.atos.ari.cdr.starter.TestServerIT</groups>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.19.1</version>
                <executions>
                    <execution>
                        <id>it</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/*ServerIT.java</include>
                            </includes>
                            <groups>net.atos.ari.cdr.starter.IntegrationTest</groups>
                            <skipTests>${skip.integration.tests}</skipTests>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-release-plugin</artifactId>
                <configuration>
                    <tagNameFormat>@{version}</tagNameFormat>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <pushChanges>false</pushChanges>
                    <goals>deploy</goals>
                    <checkModificationExcludes>
                        <checkModificationExclude>CHANGELOG.md</checkModificationExclude>
                        <checkModificationExclude>.travis/prepare.sh</checkModificationExclude>
                        <checkModificationExclude>.travis/push.sh</checkModificationExclude>
                    </checkModificationExcludes>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.scm</groupId>
                        <artifactId>maven-scm-api</artifactId>
                        <version>1.9.5</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.maven.scm</groupId>
                        <artifactId>maven-scm-provider-gitexe</artifactId>
                        <version>1.9.5</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>versions-maven-plugin</artifactId> 
                </plugin> -->

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>se.bjurr.gitchangelog</groupId>
                <artifactId>git-changelog-maven-plugin</artifactId>
                <version>1.60</version>
                <executions>
                    <execution>
                        <id>generateChangelog</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>git-changelog</goal>
                        </goals>
                        <configuration>
                            <gitHubToken>${GITHUB_API_TOKEN}</gitHubToken>
                            <templateFile>changelog.mustache</templateFile>
                            <settingsFile>changelog.json</settingsFile>
                            <file>CHANGELOG.md</file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
